# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: ["dev"]
    paths-ignore:
      - "client/**"
      - "README.md"


  pull_request:
    branches: ["dev"]
    paths-ignore:
      - "client/**"
      - "README.md"

permissions:
  contents: read
env:
  S3_BUCKET_NAME: bucket-somojeon

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
      RDS_ID: ${{ secrets.RDS_ID }}
      RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_MAIL }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Add permission
        run: chmod +x server/gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build
          gradle-version: 7.6.1
          gradle-wrapper-path: server/gradlew
          build-root-directory: server/

      # build한 후 프로젝트를 압축합니다.
      - name: Make zip file
        run: zip -r ./somojeon-dev.zip server/
        shell: bash

      # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
      # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 압축한 프로젝트를 S3로 전송합니다.
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./somojeon-dev.zip s3://$S3_BUCKET_NAME/somojeon-dev.zip

      # CodeDeploy에게 배포 명령을 내립니다.
      - name: Code Deploy
        run: >
          aws deploy create-deployment --application-name deploy-application-somojeon
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name deploy-application-somojeon-group
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=somojeon-dev.zip

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_USERNAME }}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: build and release to DockerHub
        env:
          NAME: gnswp21 # 계정 명
          REPO: somojeon # 레포 이름
        run: |
          docker build -t $REPO ./server
          docker tag $REPO:latest $NAME/$REPO:devLatest
          docker push $NAME/$REPO:devLatest
